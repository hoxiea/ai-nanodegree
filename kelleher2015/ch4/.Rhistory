install.packages("RWeka")
# Enter the data manually
ex2data <- data.frame(GoodBehavior = c(rep(FALSE, 3), rep(TRUE, 3)))
ex2data$AgeLT30 <- c(TRUE, FALSE, TRUE, rep(FALSE, 3))
ex2data$Drug <- c(rep(FALSE, 4), TRUE, FALSE)
ex2data$Recidivist <- rep(c(TRUE, FALSE), 3)
# Get ID3 classifier
# install.packages("RWeka")
library(RWeka)
WPM("refresh-cache")
WPM("list-packages", "available")
WPM("install-package", "simpleEducationalLearningSchemes")
WPM("load-package", "simpleEducationalLearningSchemes")
ID3 <- make_Weka_classifier("weka/classifiers/trees/Id3")
ID3(Recidivist ~ ., data = ex2data)
ID3(Recidivist ~ ., data = ex2data)
ex3data <- read.csv("ex3data.csv")
ex3data <- read.csv("ex3data.csv")
# Data available in Google Sheet at http://bit.ly/kelleher2015-ch4-ex3
options(stringsAsFactors = TRUE)
ex3data <- read.csv("ex3data.csv")
ex3data
class(ex3data$Education)
class(ex3data$Age)
library(entropy)
?entropy.empirical(, unit="log2")
table(ex3data$AnnualIncome)
entropy.empirical(table(ex3data$AnnualIncome), unit="log2")
table(ex3data$AnnualIncome) / nrow(ex3data)
freqs <- table(ex3data$AnnualIncome) / nrow(ex3data)
giniEx3 <- 1 - sum(freqs ** 2)
giniEx3
ex3data[order(ex3data$age), ]
ex3data[order(ex3data$Age), ]
0 + entropy.empirical(table(ex3data$AnnualIncome[3:8]), unit="log2")
(2/8) * 0 + (6/8) * entropy.empirical(table(ex3data$AnnualIncome[3:8]), unit="log2")
(5/8) * entropy.empirical(ex3data$AnnualIncome[1:5], "log2") +
(3/8) * entropy.empirical(ex3data$AnnualIncome[6:8], "log2")
(5/8) * entropy.empirical(ex3data$AnnualIncome[1:5], "log2") +
(3/8) * entropy.empirical(ex3data$AnnualIncome[6:8], "log2")
(5/8) * entropy.empirical(table(ex3data$AnnualIncome[1:5]), "log2") +
(3/8) * entropy.empirical(table(ex3data$AnnualIncome[6:8]), "log2")
(6/8) * entropy.empirical(table(ex3data$AnnualIncome[1:6]), unit="log2") + (2/8) * 0
# Split at 26
H - ((2/8) * 0 + (6/8) * entropy.empirical(table(ex3data$AnnualIncome[3:8]), unit="log2"))
library(entropy)
H <- entropy.empirical(table(ex3data$AnnualIncome), unit="log2")
library(entropy)
H <- entropy.empirical(table(ex3data$AnnualIncome), unit="log2")
# Split at 26
H - ((2/8) * 0 + (6/8) * entropy.empirical(table(ex3data$AnnualIncome[3:8]), unit="log2"))
# Split at 39.5
H - ((5/8) * entropy.empirical(table(ex3data$AnnualIncome[1:5]), "log2") +
(3/8) * entropy.empirical(table(ex3data$AnnualIncome[6:8]), "log2"))
# Split at 45
H - ((6/8) * entropy.empirical(table(ex3data$AnnualIncome[1:6]), unit="log2") + (2/8) * 0)
entropy.empirical(table(ex3data$AnnualIncome[1:6]), unit="log2")
entropy.empirical(table(ex3data$AnnualIncome[3:8]), unit="log2")
table(ex3data$AnnualIncome[1:6])
table(ex3data$AnnualIncome[3:8])
ex3dataSorted <- ex3data[order(ex3data$Age), ]
ex3dataSorted <- ex3data[order(ex3data$Age), ]
ex3dataSorted
# Split at 26
H - ((2/8) * 0 + (6/8) * entropy.empirical(table(ex3dataSorted$AnnualIncome[3:8]), unit="log2"))
# Split at 39.5
H - ((5/8) * entropy.empirical(table(ex3dataSorted$AnnualIncome[1:5]), "log2") +
(3/8) * entropy.empirical(table(ex3dataSorted$AnnualIncome[6:8]), "log2"))
# Split at 45
H - ((6/8) * entropy.empirical(table(ex3dataSorted$AnnualIncome[1:6]), unit="log2") + (2/8) * 0)
ex3data
split(ex3data, ex3data$Education)
str(split(ex3data, ex3data$Education))
ex3data[,"Education"]
f
vectorEntropy <- function(x) {
freqs <- table(x) / length(x)
-1 * sum(probs * log2(probs))
}
# Given a single string s, how many bits of entropy does
# the string contain?
# stringLettersEntropy("AAA") == 0
# stringLettersEntropy("ABAB") == 1
stringLettersEntropy <- function(s) {
letters <- strsplit(s, split="")[[1]]
vectorEntropy(letters)
}
H_total <- stringLettersEntropy("OXYMORON")
vectorEntropy <- function(x) {
probs <- table(x) / length(x)
-1 * sum(probs * log2(probs))
}
# Given a single string s, how many bits of entropy does
# the string contain?
# stringLettersEntropy("AAA") == 0
# stringLettersEntropy("ABAB") == 1
stringLettersEntropy <- function(s) {
letters <- strsplit(s, split="")[[1]]
vectorEntropy(letters)
}
H_total <- stringLettersEntropy("OXYMORON")
# Of course, there's a library for this...
# install.packages("entropy")
# entropy.empirical(probs, unit="log2")
H_total
LETTERS[1:8]
vectorEntropy(LETTERS[1:8])
# Enter the data manually
ex2data <- data.frame(GoodBehavior = c(rep(FALSE, 3), rep(TRUE, 3)))
ex2data$AgeLT30 <- c(TRUE, FALSE, TRUE, rep(FALSE, 3))
ex2data$Drug <- c(rep(FALSE, 4), TRUE, FALSE)
ex2data$Recidivist <- rep(c(TRUE, FALSE), 3)
# Get ID3 classifier
# install.packages("RWeka")
library(RWeka)
WPM("refresh-cache")
WPM("list-packages", "available")
WPM("install-package", "simpleEducationalLearningSchemes")
WPM("load-package", "simpleEducationalLearningSchemes")
ID3 <- make_Weka_classifier("weka/classifiers/trees/Id3")
# vectorEntropy(ex3data$AnnualIncome)
library(entropy)
H <- entropy.empirical(table(ex3data$AnnualIncome), unit="log2")
H
H <- vectorEntropy(ex3data$AnnualIncome)
H
# Split at 26
H - ((2/8) * 0 + (6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[3:8]))
# Split at 39.5
H - ((5/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:5]) + (3/8) * vectorEntropy(ex3dataSorted$AnnualIncome[6:8]))
# Split at 45
H - ((6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:6]) + (2/8) * 0)
# Split at 26
H - ((2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:2]) + (6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[3:8]))
# Split at 39.5
H - ((5/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:5]) + (3/8) * vectorEntropy(ex3dataSorted$AnnualIncome[6:8]))
# Split at 45
H - ((6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:6]) + (2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[7:8]))
H <- vectorEntropy(ex3data$AnnualIncome)
H
freqs <- table(ex3data$AnnualIncome) / nrow(ex3data)
1 - sum(freqs ** 2)
ex3dataSorted <- ex3data[order(ex3data$Age), ]
ex3dataSorted
# Split at 26
H - ((2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:2]) + (6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[3:8]))
# Split at 39.5
H - ((5/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:5]) + (3/8) * vectorEntropy(ex3dataSorted$AnnualIncome[6:8]))
# Split at 45
H - ((6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:6]) + (2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[7:8]))
vectorEntropy(ex3dataSorted$AnnualIncome[1:2])
ex3dataSorted$AnnualIncome[1:2]
vectorEntropy(c(1,1,1))
vectorEntropy(ex3dataSorted$AnnualIncome[1:2])
table(ex3dataSorted$AnnualIncome[1:2])
table(ex3dataSorted$AnnualIncome[1:2]) / length(ex3dataSorted$AnnualIncome[1:2])
vectorEntropy(c(1))
vectorEntropy <- function(x) {
probs <- table(x) / length(x)
probs <- probs[probs != 0]
-1 * sum(probs * log2(probs))
}
# Given a single string s, how many bits of entropy does
# the string contain?
# stringLettersEntropy("AAA") == 0
# stringLettersEntropy("ABAB") == 1
stringLettersEntropy <- function(s) {
letters <- strsplit(s, split="")[[1]]
vectorEntropy(letters)
}
H_total <- stringLettersEntropy("OXYMORON")
# Of course, there's a library for this...
# install.packages("entropy")
# entropy.empirical(probs, unit="log2")
vowels <- "OYOO"
consonants <- "XMRN"
remainingEntropy <- (4/8) * stringLettersEntropy(vowels) + (4/8) * stringLettersEntropy(consonants)
H_total - remainingEntropy
vectorEntropy(LETTERS[1:8])
library(assertthat)
options(stringsAsFactors = FALSE)
scrabbleWords <- read.table("1_scrabble_dict.txt")
colnames(scrabbleWords) <- "Word"
points <- c(1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3,     # A, B, C, etc.
1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10)
# assert_that(length(points) == 26)
names(points) <- LETTERS
scrabblePoints <- function(word) {
letters <- strsplit(word, split="")[[1]]
sum(points[letters])
}
scrabbleWords$Points <- sapply(scrabbleWords$Word, scrabblePoints)
scrabbleWords$Entropy <- sapply(scrabbleWords$Word, stringLettersEntropy)
with(scrabbleWords, plot(Entropy, Points, col = rgb(0, 0, 0, 0.3), main="Points vs. Entropy for All Legal Scrabble Plays"))
H <- vectorEntropy(ex3data$AnnualIncome)
H
# Split at 26
H - ((2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:2]) + (6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[3:8]))
# Split at 39.5
H - ((5/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:5]) + (3/8) * vectorEntropy(ex3dataSorted$AnnualIncome[6:8]))
# Split at 45
H - ((6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:6]) + (2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[7:8]))
target <- "AnnualIncome"
splitFactor <- "Education"
split(ex3data, ex3data[,splitFactor])
target <- "AnnualIncome"
splitFactor <- "Education"
Xs <- split(ex3data, ex3data[,splitFactor])
lapply(
Xs,
function(X) {
vectorEntropy(X[,target])
}
)
target <- "AnnualIncome"
splitFactor <- "Education"
Xs <- split(ex3data, ex3data[,splitFactor])
entropies <- lapply(
Xs,
function(X) {
vectorEntropy(X[,target])
}
)
weightedEntropy <- 1
weights <- lapply(Xs, length)
weights
Xs
weights <- lapply(Xs, nrow)
weights
weights <- lapply(Xs, function (df) {nrow(df) / nrow(ex3data)})
weights
class(weights)
class(entropies)
unlist(entropies)
class(unlist(entropies))
unlist(entropies) * unlist(weights)
sum(unlist(entropies) * unlist(weights))
target <- "AnnualIncome"
splitFactor <- "Education"
Xs <- split(ex3data, ex3data[,splitFactor])
Xs
entropies <- lapply(
Xs,
function(X) {
vectorEntropy(X[,target])
}
)
entropies
weights <- lapply(Xs, function (df) {nrow(df) / nrow(ex3data)})
weights
names(weights)
assert_that(names(entropies) == names(weights))
assert_that(all.equal(names(entropies), names(weights)))
sum(unlist(entropies) * unlist(weights))
head(ex3data)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) {nrow(df) / nrow(data)})
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
weightedEntropyRemaining(ex3data, splitFactors[1], target)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) {nrow(df) / nrow(data)})
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
weightedEntropyRemaining(ex3data, splitFactors[2], target)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) {nrow(df) / nrow(data)})
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
weightedEntropyRemaining(ex3data, splitFactors[3], target)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) {nrow(df) / nrow(data)})
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
sapply(splitFactors, function(sf) {weightedEntropyRemaining(ex3data, sf, target)})
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) {nrow(df) / nrow(data)})
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
H - sapply(splitFactors, function(sf) {weightedEntropyRemaining(ex3data, sf, target)})
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedEntropyRemaining <- function(data, splitFactor, target) {
Xs <- split(data, data[, splitFactor])
subsetEntropies <- lapply(Xs, function(X) { vectorEntropy(X[, target]) })
subsetWeights <- lapply(Xs, function (df) { nrow(df) / nrow(data) })
assert_that(all.equal(names(subsetEntropies), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetEntropies) * unlist(subsetWeights))
}
infoGain <- H - sapply(splitFactors, function(sf) { weightedEntropyRemaining(ex3data, sf, target) })
infoGain
infoGain
ex3data[c("Education", "MaritalStatus", "Occupation")]
ex3data[names(infoGain)]
factorEntropies <- apply(ex3data[names(infoGain)], 2, vectorEntropy)
factorEntropies <- apply(ex3data[names(infoGain)], 2, vectorEntropy)
infoGain / factorEntropies
vectorGini <- function(x) {
probs <- table(x) / length(x)
1 - sum(probs ** 2)
}
vectorGini(ex3data$AnnualIncome)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedChaosRemaining <- function(data, splitFactor, target, chaosFunction) {
Xs <- split(data, data[, splitFactor])
subsetChaoses <- lapply(Xs, function(X) { chaosFunction(X[, target]) })
subsetWeights <- lapply(Xs, function (df) { nrow(df) / nrow(data) })
assert_that(all.equal(names(subsetChaoses), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetChaoses) * unlist(subsetWeights))
}
weightedEntropyRemaining <- function(data, splitFactor, target) {
weightedChaosRemaining(data, splitFactor, target, vectorEntropy)
}
infoGain <- H - sapply(splitFactors, function(sf) { weightedEntropyRemaining(ex3data, sf, target) })
infoGain
weightedGiniRemaining <- function(data, splitFactor, target) {
weightedChaosRemaining(data, splitFactor, target, vectorGini)
}
totalGini <- vectorGini(ex3data$AnnualIncome)
weightedGiniRemaining <- function(data, splitFactor, target) {
weightedChaosRemaining(data, splitFactor, target, vectorGini)
}
totalGini <- vectorGini(ex3data$AnnualIncome)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
giniGain <- totalGini - sapply(splitFactors, function(sf) { weightedGiniRemaining(ex3data, sf, target) })
giniGain
library(entropy)
entropy.empirical(c(1,1,1,1))
entropy.empirical(c(1))
vectorEntropy <- function(x) {
probs <- table(x) / length(x)
probs <- probs[probs != 0]  # R will fill in 0s for factor levels that aren't in the vector. But log2(0) is NaN
-1 * sum(probs * log2(probs))
}
H <- vectorEntropy(ex3data$AnnualIncome)
H
vectorGini <- function(x) {
probs <- table(x) / length(x)
1 - sum(probs ** 2)
}
vectorGini(ex3data$AnnualIncome)
ex3dataSorted <- ex3data[order(ex3data$Age), ]
ex3dataSorted
# Split at 26
H - ((2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:2]) + (6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[3:8]))
# Split at 39.5
H - ((5/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:5]) + (3/8) * vectorEntropy(ex3dataSorted$AnnualIncome[6:8]))
# Split at 45
H - ((6/8) * vectorEntropy(ex3dataSorted$AnnualIncome[1:6]) + (2/8) * vectorEntropy(ex3dataSorted$AnnualIncome[7:8]))
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
weightedChaosRemaining <- function(data, splitFactor, target, chaosFunction) {
Xs <- split(data, data[, splitFactor])
subsetChaoses <- lapply(Xs, function(X) { chaosFunction(X[, target]) })
subsetWeights <- lapply(Xs, function (df) { nrow(df) / nrow(data) })
assert_that(all.equal(names(subsetChaoses), names(subsetWeights)))  # order is the same in both vectors
sum(unlist(subsetChaoses) * unlist(subsetWeights))
}
weightedEntropyRemaining <- function(data, splitFactor, target) {
weightedChaosRemaining(data, splitFactor, target, vectorEntropy)
}
infoGain <- H - sapply(splitFactors, function(sf) { weightedEntropyRemaining(ex3data, sf, target) })
infoGain
factorEntropies <- apply(ex3data[names(infoGain)], 2, vectorEntropy)
infoGain / factorEntropies
factorEntropies <- apply(ex3data[names(infoGain)], 2, vectorEntropy)
infoGain / factorEntropies
weightedGiniRemaining <- function(data, splitFactor, target) {
weightedChaosRemaining(data, splitFactor, target, vectorGini)
}
totalGini <- vectorGini(ex3data$AnnualIncome)
splitFactors <- c("Education", "MaritalStatus", "Occupation")
target <- "AnnualIncome"
giniGain <- totalGini - sapply(splitFactors, function(sf) { weightedGiniRemaining(ex3data, sf, target) })
giniGain
# Available at http://bit.ly/kelleher2015-ch4-ex5
ex5data <- read.csv("ex5data.csv")
# Available at http://bit.ly/kelleher2015-ch4-ex5
ex5data <- read.csv("ex5data.csv")
ex5data <- read.csv("ex5data.csv")
# Available at http://bit.ly/kelleher2015-ch4-ex5
ex5data <- read.csv("ex5data.csv")
# Available at http://bit.ly/kelleher2015-ch4-ex5
ex5data <- read.csv("ex5data.csv")
# Available at http://bit.ly/kelleher2015-ch4-ex5
ex5data <- read.csv("ex5data.csv")
ex5data
class(ex5data$Exercise)
options(stringsAsFactors=TRUE)
ex5data <- read.csv("ex5data.csv")
class(ex5data$Exercise)
ex5data
bs1 <- ex5data[c(1,2,2,5,5), ]
bs2 <- ex5data[c(1,2,2,4,5), ]
bs3 <- ex5data[c(1,1,2,4,5), ]
bs1
# Get ID3 classifier
#install.packages("RWeka")
library(RWeka)
#WPM("refresh-cache")
#WPM("list-packages", "available")
#WPM("install-package", "simpleEducationalLearningSchemes")
WPM("load-package", "simpleEducationalLearningSchemes")
ID3 <- make_Weka_classifier("weka/classifiers/trees/Id3")
bs1 <- ex5data[c(1,2,2,5,5), c("Exercise", "Family", "Risk")]
bs2 <- ex5data[c(1,2,2,4,5), c("Smoker", "Obese", "Risk")]
bs3 <- ex5data[c(1,1,2,4,5), c("Obese", "Family", "Risk")]
bs1 <- ex5data[c(1,2,2,5,5), c("Exercise", "Family", "Risk")]
bs2 <- ex5data[c(1,2,2,4,5), c("Smoker", "Obese", "Risk")]
bs3 <- ex5data[c(1,1,2,4,5), c("Obese", "Family", "Risk")]
m1 <- ID3(Risk ~ ., data = bs1)
m1 <- ID3(Risk ~ ., data = bs1)
m2 <- ID3(Risk ~ ., data = bs2)
m3 <- ID3(Risk ~ ., data = bs3)
m1
m2
m3
str(m1)
ID3(Risk ~ ., data = bs1)
ID3(Risk ~ ., data = bs2)
ID3(Risk ~ ., data = bs3)
bs3
m1 <- ID3(Risk ~ ., data = bs1)
m2 <- ID3(Risk ~ ., data = bs2)
m3 <- ID3(Risk ~ ., data = bs3)
m1
m1
m3
m3
ex5data
?predict
newdata <- c("rarely", FALSE, TRUE, "yes")
predict(m1, newdata)
predict(m1, ex5data[1,])
m1
as.factor("rarely")
newdata <- c(as.factor("rarely"), FALSE, TRUE, as.factor("yes"))
predict(m1, newdata)
newdata <- data.frame(Exercise=as.factor("rarely"), Smoker=FALSE, Obese=TRUE, Family=as.factor("yes"))
newdata
predict(m1, newdata)
predict(m1, newdata)
predict(m2, newdata)
predict(m3, newdata)
newdata <- data.frame(Exercise=as.factor("rarely"), Smoker=FALSE, Obese=TRUE, Family=as.factor("yes"))
predict(m1, newdata)
predict(m2, newdata)
predict(m3, newdata)
m1
m2
m3
rbind(ex5data, c(Exercise=as.factor("rarely"), Smoker=FALSE, Obese=TRUE, Family=as.factor("yes")))
rbind(ex5data, c("rarely", FALSE, TRUE, "yes"))
ex5data[,-1]
rbind(ex5data[,-1], c("rarely", FALSE, TRUE, "yes"))
ex5data[,-1]
ex5data[,1:ncol(ex5data) - 1]
rbind(ex5data[,1:ncol(ex5data) - 1], c("rarely", FALSE, TRUE, "yes"))
rbind(ex5data[,1:ncol(ex5data) - 1], c("rarely", FALSE, TRUE, "yes"))[6]
rbind(ex5data[,1:ncol(ex5data) - 1], c("rarely", FALSE, TRUE, "yes"))[6,]
newdata <- rbind(ex5data[,1:ncol(ex5data) - 1], c("rarely", FALSE, TRUE, "yes"))[6,]   # should be easier
predict(m1, newdata)
predict(m2, newdata)
predict(m3, newdata)
predict(m1, newdata)
newdata
m1
m2
m3
newdata <- rbind(ex5data[,1:ncol(ex5data) - 1], c("rarely", FALSE, TRUE, "yes"))[6,]   # should be easier
predict(m1, newdata)
predict(m2, newdata)
predict(m3, newdata)
m3
predict(m3, newdata)
newdata
pbinom(5, size=11, prob=0.2, lower.tail=FALSE)
qbinom(5, size=11, prob=0.2, lower.tail=FALSE)
pbinom(5, size=11, prob=0.2, lower.tail=FALSE)
pbinom(6, size=12, prob=0.5)
pbinom(50, size=100, prob=0.5)
pbinom(50, size=99, prob=0.5)
pbinom(50, size=101, prob=0.5)
pbinom(5, size=11, prob=0.49, lower.tail=FALSE)
pbinom(10, size=21, prob=0.49, lower.tail=FALSE)
